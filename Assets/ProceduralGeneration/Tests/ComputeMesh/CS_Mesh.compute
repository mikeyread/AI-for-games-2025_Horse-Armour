#pragma kernel ComputeBasicMesh

uniform float PI;
uniform float4 globalPosition;
uniform float2 globalOffset;

StructuredBuffer<float> hash;
RWStructuredBuffer<float3> vertices;
RWStructuredBuffer<int> indices;


uniform int meshSize;
uniform float quadScale;

uniform uint octaves;
uniform float frequency;
uniform float amplitude;
uniform float persistence;
uniform float lacurnity;



float PerlinCosineLerp(float left, float right, float percent)
{
    return ((cos(PI * percent) + 1) / 2) * left + ((1 - cos(PI * percent)) / 2 * right);
}


float Noise(float2 pos) {
    uint flooredX = (int)floor(pos.x);
    uint flooredY = (int)floor(pos.y);
    
    uint truePos = flooredX + flooredY * meshSize;
    uint trueMeshScale = meshSize * meshSize;
    
    float bottomLeft = hash[truePos % trueMeshScale];
    float bottomRight = hash[truePos + 1 % trueMeshScale];
    float topLeft = hash[truePos + meshSize % trueMeshScale];
    float topRight = hash[truePos + 1 + meshSize % trueMeshScale];
    
    float interpolatedX = pos.x - flooredX;
    float interpolatedY = pos.y - flooredY;
    
    float xLerp = PerlinCosineLerp(bottomLeft, bottomRight, interpolatedX);
    float yLerp = PerlinCosineLerp(topLeft, topRight, interpolatedX);
    
    return PerlinCosineLerp(xLerp, yLerp, interpolatedY);
}


float FractalSum(float2 pos, float freq, float amp) {
    float sum = 0;
    float totalSum = 0;
    
    for (int i = 0; i < octaves; i++)
    {
        sum += amp * Noise(pos * freq);
        totalSum += amp;
        
        amp *= persistence;
        freq *= lacurnity;
    }

    return sum;
}


[numthreads(16, 16, 1)]
void ComputeBasicMesh(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= meshSize)
    {
        return;
    }
    
    uint vertexIndex = id.x + (id.y * meshSize);
    
    float noiseOffset = FractalSum(abs(id.xy + globalPosition.xz + globalOffset.xy), frequency, amplitude);
    
    vertices[vertexIndex] = float3(id.x, noiseOffset, id.y);
    
    if (id.x < meshSize - 1 && id.y < meshSize - 1)
    {
        uint triangleIndex = 6 * vertexIndex;
        
        indices[triangleIndex] = vertexIndex + 1;
        indices[triangleIndex + 1] = vertexIndex;
        indices[triangleIndex + 2] = vertexIndex + meshSize;
        
        indices[triangleIndex + 3] = vertexIndex + meshSize;
        indices[triangleIndex + 4] = vertexIndex + meshSize + 1;
        indices[triangleIndex + 5] = vertexIndex + 1;
    }
}